package com.pahanaedu.billing.model;

<<<<<<< HEAD
public class Cashier {
    private int cashierId;
    private String username;
    private String password; // In production, store hashed passwords!
    private String name;
    private String email;

    // Constructor with all fields
=======
/**
 * Represents a Cashier user in the billing system.
 * Responsible for managing billing and customer interactions.
 * Passwords should be securely hashed and managed in production.
 */
public class Cashier {

    private final int cashierId;  // id is immutable once set
    private String username;
    private String password; // store hashed password in real applications
    private String name;
    private String email;

    /**
     * Full constructor to initialize all fields.
     *
     * @param cashierId Unique cashier identifier
     * @param username cashier username/login
     * @param password cashier password (hashed in real use)
     * @param name cashier full name
     * @param email cashier email address
     */
>>>>>>> bf992412cd3a6a01e28f6e8aa90f3d557278dde1
    public Cashier(int cashierId, String username, String password, String name, String email) {
        this.cashierId = cashierId;
        this.username = username;
        this.password = password;
        this.name = name;
        this.email = email;
    }

<<<<<<< HEAD
    // Default constructor (useful for frameworks or if you set properties later)
    public Cashier() {}

    // Getters and Setters for all fields
    public int getCashierId() {
        return cashierId;
    }

    public void setCashierId(int cashierId) {
        this.cashierId = cashierId;
=======
    /**
     * Constructor without `cashierId` if IDs are generated by the database.
     */
    public Cashier(String username, String password, String name, String email) {
        this.cashierId = 0; // or use another default or throw exception if desired
        this.username = username;
        this.password = password;
        this.name = name;
        this.email = email;
    }

    // Default constructor (frameworks or setters can set properties later)
    public Cashier() {
        this.cashierId = 0;
    }

    public int getCashierId() {
        return cashierId;
>>>>>>> bf992412cd3a6a01e28f6e8aa90f3d557278dde1
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

<<<<<<< HEAD
=======
    /**
     * Returns the password hash or raw password string.
     * Note: Real apps should never expose raw passwords.
     */
>>>>>>> bf992412cd3a6a01e28f6e8aa90f3d557278dde1
    public String getPassword() {
        return password;
    }

<<<<<<< HEAD
    public void setPassword(String string) { // Renamed parameter from 'password' to 'string' to avoid conflict if needed, or simply 'password' is fine
        this.password = string;
=======
    /**
     * Sets the cashier password.
     * In real applications, hash the password before setting it.
     *
     * @param password new password or hashed password
     */
    public void setPassword(String password) {
        this.password = password;
>>>>>>> bf992412cd3a6a01e28f6e8aa90f3d557278dde1
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

<<<<<<< HEAD
    // Example: Cashier-specific actions (you will implement these later with business logic)
    public void generateBill() {
        System.out.println("Cashier is generating a bill...");
        // This method would eventually call a BillingService to create a bill
    }

    public void processPayment() {
        System.out.println("Cashier is processing payment...");
        // This method would interact with payment handling logic
    }

    public void viewCustomerDetails() {
        System.out.println("Cashier is viewing customer details...");
        // This method would access CustomerDAO to retrieve customer info
=======
    // Place-holder methods to be extended with real business logic

    /**
     * Example method where cashier generates a bill.
     */
    public void generateBill() {
        System.out.println("Cashier is generating a bill...");
        // Connect with BillingService or DAO layer here
    }

    /**
     * Process customer payment interaction.
     */
    public void processPayment() {
        System.out.println("Cashier is processing payment...");
        // Payment processing logic or service calls
    }

    /**
     * View customer details as part of cashier duties.
     */
    public void viewCustomerDetails() {
        System.out.println("Cashier is viewing customer details...");
        // Connect with CustomerDAO or service to fetch data
>>>>>>> bf992412cd3a6a01e28f6e8aa90f3d557278dde1
    }

    @Override
    public String toString() {
<<<<<<< HEAD
=======
        // Exclude password for security
>>>>>>> bf992412cd3a6a01e28f6e8aa90f3d557278dde1
        return "Cashier{" +
                "cashierId=" + cashierId +
                ", username='" + username + '\'' +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                '}';
    }
}
